fruits = list()
fruits_answer = str()
while True:
    fruit = input('название фрукта: ')
    # КОММЕНТАРИЙ: любой объект Python может быть проверен на истинность: явно с помощью функции bool(), или неявно в тех инструкциях и выражениях, где интерпретатор ожидает bool объект — что касается объектов str, то False возвращают пустые строки '', любые другие объекты возвращают True
    # ИСПРАВИТЬ: перепишите условную конструкцию так, чтобы в ней осуществлялся выход из цикла, при прохождении неявной проверки того, что fruit является пустой строкой
    if fruit != '':
        fruits.append(fruit)
    else:
        # ИСПРАВИТЬ: этот цикл никак не связан с внешним циклом, потому что выполняется тогда, когда внешний свою работу де-факто закончил — любые действия, выполняемые после завершения цикла, следует выносить за пределы цикла
        i = 0
        # ИСПРАВИТЬ: когда количество итераций заранее известно, то обычно уместнее использовать цикл for
        while i != len(fruits):
            if i == len(fruits) - 1:
                fruits_answer += fruits[i]
            if i == len(fruits) - 2:
                fruits_answer += fruits[i] + ' и '
            if i < len(fruits) - 2:
                fruits_answer += fruits[i] + ', '
            i += 1
        # СДЕЛАТЬ: весь этот вложенный цикл можно заменить на два вызова join() с двумя срезами [:-2] и [-2:] — проверьте, что именно эти срезы возвращают для последовательностей разной длины
        break

print(f'\n{fruits_answer}\n')


# название фрукта: яблоко
# название фрукта:
#
# яблоко

# название фрукта: яблоко
# название фрукта: груша
# название фрукта:
#
# яблоко и груша

# название фрукта: яблоко
# название фрукта: груша
# название фрукта: апельсин
# название фрукта:
#
# яблоко, груша и апельсин


# ИТОГ: нужно лучше, доработать — 1/4
