import sys

# КОММЕНТАРИЙ: этот метод читает текстовые данные до получения сигнала EOF (end of file), разбивая их по EOL (end of line)
std = sys.stdin.readlines()
# УДАЛИТЬ: однако в контексте наших задач, используя этот метод, вы предлагаете пользователю контринтуитивный подход: не оговаривая количество и качество данных вы предлагаете свободный ввод, без подсказок, перекладывая к тому же на пользователя ответственность за прекращение ввода — это увеличивает вероятность и варианты сбоя (см. тесты ниже), а целесообразности, которая бы оправдала такой подход, я не вижу
num_1_1, num_1_2, num_1_3 = int(std[0]), int(std[1]), int(std[2])
# КОММЕНТАРИЙ: и, говоря шире, для cli интерфейсов вообще не свойственен произвольный ввод данных — наоборот, cli интерфейсы довольно строго формализованы (посмотрите хотя бы на git) — поэтому этот метод для stdin использовать довольно бессмысленно
# КОММЕНТАРИЙ: завершая эту тему: объект sys.stdin является экземпляром класса io.TextIOWrapper для работы с текстовыми файлами (потому что стандартные потоки это и есть текстовые файлы) — и вот при работе с файлами напрямую, а не посредством терминала метод readlines() безусловно востребован — мы будем этим заниматься через некоторое время

# ПЕРЕИМЕНОВАТЬ: сумма — total, sum_ (sum — это имя встроенной функции)
num_1_0 = 0
# ИСПРАВИТЬ: нет смысла прибавлять ноль
if num_1_1 >= 0:
    num_1_0 += num_1_1
# ИСПОЛЬЗОВАТЬ: круглые скобки используются для формирования кортежа, генераторного выражения, изменения приоритетов операторов и записи многострочных выражений — больше нигде и никак
if num_1_2 >= 0:
    num_1_0 += num_1_2
if num_1_3 >= 0:
    num_1_0 += num_1_3

print(num_1_0)


# ИСПОЛЬЗОВАТЬ везде: PEP 8 рекомендует добавлять пробелы после символа # — в большинстве редакторов кода, включая Notepad++, это делает команда "Вкл./Выкл. комментарий"
# 5
# 6
# -7
# ^Z
# 11

# 1
# 2
# ^Z
# ...
# IndexError: list index out of range

# 1
# 2
# 3
# ...
# KeyboardInterrupt

# 1
# 2
# 3
# q
# ...


# ИТОГ: очень хорошо — 5/6


# КОММЕНТАРИЙ: PEP 8 — сборник рекомендаций по стилистическому оформлению Python кода — их стоит использовать для большего удобства чтения своего и чужого кода: https://peps.python.org/pep-0008/
